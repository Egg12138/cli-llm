#!/usr/bin/env python3
#@Egg12138
import click
import openai
import time
import os
import re
import sys
import select
import signal
from contextlib import contextmanager
from datetime import datetime

API_KEY = os.getenv('OPENAI_API_KEY')
API_ENDPOINT = os.getenv('OPENAI_API_ENDPOINT')
APIModels = ['coder', 'chat', 'creative']
APIModels = APIModels + [ ''.join([m, '-R']) for m in APIModels]
USER = 'egg'
RED = '\033[91m'
BOLD = '\033[1m'
BLUE = '\033[94m'
MEGANT = '\033[35m'
RESET = '\033[0m'
BG_YELLOW = '\033[43m'
TIPF = f'{BLUE}{BOLD}'
CODEF = f'{MEGANT}{BOLD}'
ERRF = f'{RED}{BOLD}'
DESCF = f'{BG_YELLOW}'
RSTF = f'{RESET}'

CODER_SYS_ROLE_EXPLAIN_DETAILED = """
        You are a helpful programmer assistant, well skilled in GNU/Linux development.
        You will two kinds to command :
        ***1. func(lang=English, keys=...) , instructions
        ***2, just instructions
        for case 1, you need to parse the func() first; argument lang is the output language. default is English, and the following parametes are keys concepts/points which mean that you need to teach me what are they in addition to the standard analysis
        >>> If you are assigned to **Teach()** something, you to to explain the syntax of the codes line by line, notice that you only need to explain same syntax once. AND you need to add comment for each line to brifly explain what this line did to make me grasp the  idea.
        >>> If you are assigned to **Explain()**, you have to explain functions the **line by line** and tell me usage AND benefits of any significant function, syntax, trick, macro or systemcall. You dont need to explain directly variable assignment like `VAR='abc', but you should figure out variable-to-variable assignment like `VAR1 = $VAR2`.
        >>> If you are assigned to **Analyse()**, you have to explain what the code block did and tell me usage AND benefits of any significant function, syntax, trick, macro or systemcall.
        >>> If you are asked to **Variable()** or **Var()**, you should try to analyse the variable-passing or dependencies from the given codes.If no given codes, you should use your knowledge to analyze it because the variable is usually opensource.
        >>> If you are assigned to **Rewrite()** , you should re-organize the codes as instructed. you should use language features and write modern codes. 
        
        --- NOTICE ---
        **** If you met some data like memory address, try to analyse something special about it (if needed)
        **** Each code block should be closed to 2 empty lines 
        ****  When you are explaining a concept, if it is a abbreviation, you need to point out what the abbreviation stand for
"""



SYS_ROLE = {
        'deepseek-coder': CODER_SYS_ROLE_EXPLAIN_DETAILED
        ,
        'deepseek-chat': '''
        You are a helpful assistant. You will answer my question in details instead of making a short summary. You have to explain the components and crutial concepts.
        Your ouput should consist of the answer and reference. 
        Each code block should be closed to 3 empty lines
        ''',
        'deepseek-creative': '''
        You are a creative AI. 
'''
        }
helps = {
    'prompt': f'{TIPF}Input prompt for deepseek.{RSTF}',
    'no-stream': f'{TIPF} the streaming of the response.(totally faster but need to wait until all results are generated){RSTF}, {ERRF}model-R does not support stream!{RSTF}',
    'model': f'{TIPF}Choose the model to use.default is coder. the deepseek-coder is not recommanded in CLI{RSTF}, Now DeepSeek-R1 Reansoner is available, append an `-R` to use the reasoner of current mode, e.g. `coder-R`, `chat-R`, `creative-R`',
    'output-codes': f'{TIPF}Output the code to the target file.Only one code block is supported({DESCF}IN PROGESS{RSTF})'
}


@contextmanager  
def override_env_tmp(key, value):
  original_value =  os.getenv(key)
  print(f'{original_value=}')
  os.environ[key] = value
  yield
  os.environ[key] = original_value

def sigint_handler(sig, frame):
    print('\nSIGINT received. exit')
    sys.exit(0)

def ensure_url_parser_ok():
    # register sigint handler to recovering the environment variables.
  signal.signal(signal.SIGINT, sigint_handler)
  override_env_tmp('NO_PROXY',"localhost")
#   override_env_tmp('NO_PROXY',"localhost,127.0.0.1,10.96.0.0/12")

def highlight_code_blocks(content):
    def replacer(matcher):
        return f'{CODEF}{matcher.group(0)}{RSTF}'
    return re.sub(r'`(.*?)`', replacer, content, flags=re.DOTALL)

def sanitize_input(input_str):
    # 过滤掉退格、方向键等特殊字符
    sanitized_str = re.sub(r'[\x00-\x1F\x7F-\x9F\uD800-\uDFFF]', '', input_str)
    return sanitized_str

def process_streamed_chunk(response):
    timenow()
    in_code_block = False
    for chunk in response:
        content = chunk.choices[0].delta.content
        # highed_content = highlight_code_blocks(content)
        is_code = '`' in content
        if is_code and not in_code_block:
            in_code_block = True
            print(f'{CODEF}{content}', end='')
        elif is_code and in_code_block:
            in_code_block = False
            print(f'{CODEF}{content}{RSTF}', end='')
        elif not is_code and in_code_block:
            print(f'{CODEF}{content}', end='')
        else:
            print(f'{RSTF}{content}', end='')

def process_chunk(response, response_time):
    choice = response.choices[0]
    modelname = response.model
    finish_reason = choice.finish_reason
    finish_reason = {
        'stop': '正常',
        'length': '长度超出max_tokens限制',
        'content_filter': '内容过滤',
        'insufficient_system_resource': '系统推理资源不足， 生成被打断',
    }.get(finish_reason, '未知')

    content = highlight_code_blocks(choice.message.content)
    print(f"{TIPF}@ {modelname} [{finish_reason}] {response_time=:.2f}s:{RSTF}")
    print(content)

def test_c():

    timenow()
    in_code_block = False
    for chunk in sys.stdin:
        content = chunk
        # highed_content = highlight_code_blocks(content)
        is_code = '```' in content
        if is_code and not in_code_block:
            in_code_block = True
            print(f'{CODEF}-----{content}', end='')
        elif is_code and in_code_block:
            in_code_block = False
            print(f'{CODEF}-----{content}{RSTF}', end='')
        elif not is_code and in_code_block:
            print(f'{CODEF}@@@@{content}', end='')
        else:
            print(f'{RSTF}{content}', end='')   



@click.command()
@click.argument('prompt', required=False, default=None)
@click.option('-p', '--prompt', help=helps['prompt'])
@click.option('-n', '--no-stream', is_flag=True, help=helps['no-stream'])
@click.option('-m', '--model', type=click.Choice(APIModels, case_sensitive=False), default='coder', help=helps['model'])
@click.option('-o', '--output-codes', nargs=1, default=None, help=helps['output-codes'])
def chat_cli(prompt, no_stream, model, output_codes):
    if prompt is None:
        prompt = input(f'{TIPF}[Ask]:{RSTF}')
    prompt = sanitize_input(prompt)
    if select.select([sys.stdin], [], [], 0.0)[0]:
        stdin_input = sys.stdin.read().strip()
    else:
        stdin_input = ""
    full_prompt = '\n'.join([prompt, stdin_input])
    ensure_url_parser_ok()
    client = openai.OpenAI(api_key=API_KEY, base_url=API_ENDPOINT)
    match model:
      case 'coder':
        model,temp = ('deepseek-coder', 0.0)
        sys_role_marker = 'deepseek-coder'
      case 'coder-R':
        model,temp = ('deepseek-reasoner', 0.0)
        sys_role_marker = 'deepseek-coder'
      case 'chat':
        model,temp = ('deepseek-chat', 1.3)
        sys_role_marker = 'deepseek-chat'
      case 'chat-R': 
        model,temp = ('deepseek-reasoner', 1.3)
        sys_role_marker = 'deepseek-chat'
      case 'creative':
        model,temp = ('deepseek-chat', 1.5)
        sys_role_marker = 'deepseek-chat'
      case 'creative-R':
        model,temp = ('deepseek-reasoner', 1.5)
        sys_role_marker = 'deepseek-chat'

    chat(full_prompt, no_stream, model, temp, SYS_ROLE[sys_role_marker], client)
    

def chat(prompt, no_stream, model, temp, sys_role, client):
    msg = [
        {"role": "system", "content": sys_role },
        {"role": "user", "content": prompt},
        ]
    start_time = time.time()
    if model == 'deepseek-reasoner':
      no_stream = True
    
    try:
        if not no_stream:
            
            print(f'{TIPF}sending...{RSTF}')
            response = client.chat.completions.create(
                model=model,
                messages=msg,
                temperature=temp,
                stream=True,
                )
            process_streamed_chunk(response)
            response_time = time.time() - start_time
            print(f"\n{TIPF}{response_time=:.2f}s{RSTF}")    


        else:
            print(f'{TIPF}sending...{RSTF}')
            response = client.chat.completions.create(
                model=model,
                messages=msg,
                temperature=temp,
                )
            response_time = time.time() - start_time
            process_chunk(response, response_time)

            
         
    except openai.APIError as e:
        timenow()
        error_status_code = int(e.message.split('-')[0].strip()[-3:])
        error_type = e.type
        print(f"{error_type=}, {error_status_code=}") 
        match error_status_code:
            case 400:
                print(f'{ERRF} {error_status_code} - 格式错误{RSTF}')
                print(f'原因：{error_type}')
                print('解决方法：请根据错误信息提示修改请求体')
            case 401:
                print(f'{ERRF}错误码 {error_status_code} - 认证失败{RSTF}')
                print(f'原因：{error_type}')
                print('解决方法：请检查您的 API key 是否正确，如没有 API key，请先创建 API key')
            case 402:
                print(f'{ERRF}错误码 {error_status_code} - 余额不足{RSTF}')
                print(f'原因：{error_type}')
                print('解决方法：请确认账户余额，并前往充值页面进行充值')
            case 422:
                print(f'{ERRF}错误码 {error_status_code} - 参数错误{RSTF}')
                print(f'原因：{error_type}')
                print('解决方法：请根据错误信息提示修改相关参数')
            case 429:
                print(f'{ERRF}错误码 {error_status_code} - 请求速率达到上限{RSTF}')
                print(f'原因：{error_type}')
                print('解决方法：请合理规划您的请求速率。我们也建议您临时切换到其它大模型厂商（如 OpenAI）的 API')
            case 500:
                print(f'{ERRF}错误码 {error_status_code} - 服务器故障{RSTF}')
                print(f'原因：{error_type}')
                print('解决方法：请等待后重试。若问题一直存在，请联系我们解决')
            case 503:
                print(f'{ERRF}错误码 {error_status_code} - 服务器繁忙{RSTF}')
                print(f'原因：{error_type}')
                print('解决方法：请稍后重试您的请求')
            case _:
                print(f'{ERRF}错误码 {error_status_code} - 未知错误{RSTF}')
                details = e.body
                print(f'原因：{error_type}, {details=}')
                print('解决方法：请稍后重试或联系技术支持')
    except Exception as e:
        timenow()
        print(f"{ERRF}未知异常:{e}{RSTF}")



def handle_code_output(content, is_stream=False):
    if not is_stream:
        pass
    
def timenow():
    formatted = datetime.now().strftime("%H:%M:%S")
    print(formatted)

        
if __name__ == '__main__':
    chat_cli()
